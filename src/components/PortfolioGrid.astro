---
export interface PortfolioItem {
  id: string;
  image: string;
  title: string;
  category: string;
  materials: string;
  description: string;
}

export interface Props {
  items: PortfolioItem[];
  showFilters?: boolean;
}

const { items, showFilters = true } = Astro.props;

const categories = [...new Set(items.map(item => item.category))];
---

<div class="portfolio">
  {showFilters && (
    <div class="filters">
      <button class="filter-btn active" data-filter="all">All</button>
      {categories.map(category => (
        <button class="filter-btn" data-filter={category}>
          {category.charAt(0).toUpperCase() + category.slice(1)}
        </button>
      ))}
    </div>
  )}

  <div class="portfolio-grid">
    {items.map(item => (
      <article class="portfolio-item" data-category={item.category}>
        <button class="portfolio-item-btn" data-lightbox={item.id}>
          <img
            src={item.image}
            alt={item.title}
            loading="lazy"
            width="400"
            height="500"
          />
          <div class="portfolio-overlay">
            <h3>{item.title}</h3>
            <p>{item.category}</p>
          </div>
        </button>
      </article>
    ))}
  </div>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox">
    <button class="lightbox-close" aria-label="Close lightbox">&times;</button>
    <div class="lightbox-content">
      <img src="" alt="" id="lightbox-img" />
      <div class="lightbox-info">
        <h3 id="lightbox-title"></h3>
        <p id="lightbox-category"></p>
        <p id="lightbox-materials"></p>
        <p id="lightbox-description"></p>
      </div>
    </div>
  </div>
</div>

<style>
  .filters {
    display: flex;
    justify-content: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-2xl);
    flex-wrap: wrap;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid var(--color-ink-black);
    font-family: var(--font-body);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-base);
    text-transform: capitalize;
  }

  .filter-btn:hover,
  .filter-btn.active {
    background-color: var(--color-ink-black);
    color: var(--color-warm-white);
  }

  .portfolio-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-lg);
  }

  .portfolio-item {
    position: relative;
    aspect-ratio: 4 / 5;
    overflow: hidden;
  }

  .portfolio-item.hidden {
    display: none;
  }

  .portfolio-item-btn {
    width: 100%;
    height: 100%;
    border: none;
    padding: 0;
    cursor: pointer;
    background: none;
    position: relative;
  }

  .portfolio-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-slow);
  }

  .portfolio-item-btn:hover img {
    transform: scale(1.05);
  }

  .portfolio-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(26, 26, 26, 0.8), transparent);
    color: white;
    padding: var(--space-lg);
    opacity: 0;
    transition: opacity var(--transition-base);
  }

  .portfolio-item-btn:hover .portfolio-overlay {
    opacity: 1;
  }

  .portfolio-overlay h3 {
    font-size: 1.125rem;
    margin-bottom: 0.25rem;
  }

  .portfolio-overlay p {
    font-size: 0.875rem;
    opacity: 0.9;
    margin: 0;
    text-transform: capitalize;
  }

  /* Lightbox */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(26, 26, 26, 0.95);
    z-index: 2000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-close {
    position: absolute;
    top: var(--space-lg);
    right: var(--space-lg);
    background: none;
    border: none;
    color: white;
    font-size: 3rem;
    cursor: pointer;
    line-height: 1;
    transition: opacity var(--transition-base);
  }

  .lightbox-close:hover {
    opacity: 0.7;
  }

  .lightbox-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--space-2xl);
    max-width: 1400px;
    width: 100%;
    max-height: 85vh;
  }

  #lightbox-img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    max-height: 85vh;
  }

  .lightbox-info {
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .lightbox-info h3 {
    font-size: 2rem;
    margin-bottom: var(--space-md);
  }

  .lightbox-info p {
    margin-bottom: var(--space-sm);
    opacity: 0.9;
  }

  @media (max-width: 768px) {
    .portfolio-grid {
      grid-template-columns: 1fr;
    }

    .lightbox-content {
      grid-template-columns: 1fr;
      gap: var(--space-lg);
    }
  }
</style>

<script define:vars={{ items }} is:inline>
  // Filter functionality
  const filterBtns = document.querySelectorAll('.filter-btn');
  const portfolioItems = document.querySelectorAll('.portfolio-item');

  filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const filter = btn.dataset.filter;

      filterBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      portfolioItems.forEach(item => {
        if (filter === 'all' || item.dataset.category === filter) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
    });
  });

  // Lightbox functionality
  const lightbox = document.getElementById('lightbox');
  const lightboxImg = document.getElementById('lightbox-img');
  const lightboxTitle = document.getElementById('lightbox-title');
  const lightboxCategory = document.getElementById('lightbox-category');
  const lightboxMaterials = document.getElementById('lightbox-materials');
  const lightboxDescription = document.getElementById('lightbox-description');
  const lightboxClose = document.querySelector('.lightbox-close');

  document.querySelectorAll('[data-lightbox]').forEach(btn => {
    btn.addEventListener('click', () => {
      const itemId = btn.dataset.lightbox;
      const item = items.find(i => i.id === itemId);

      if (item) {
        lightboxImg.src = item.image;
        lightboxImg.alt = item.title;
        lightboxTitle.textContent = item.title;
        lightboxCategory.textContent = item.category.charAt(0).toUpperCase() + item.category.slice(1);
        lightboxMaterials.textContent = item.materials;
        lightboxDescription.textContent = item.description;
        lightbox?.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
    });
  });

  lightboxClose?.addEventListener('click', () => {
    lightbox?.classList.remove('active');
    document.body.style.overflow = '';
  });

  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    }
  });
</script>
